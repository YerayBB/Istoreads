//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Istoreads
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ae1781fe-282c-4907-a4ba-5436643c016b"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""cdc1a914-268a-4daa-b2ac-8f674362dc71"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""aa966c7a-0926-4b81-9235-cfd1ec761503"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""c9cd29fe-439a-45a3-b0a0-8d4249596409"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""adfcc42c-d2ee-4072-993f-13635a85abe6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateMouse"",
                    ""type"": ""Button"",
                    ""id"": ""98961e05-bf12-4976-9433-15a11e14a636"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7ddf98e6-4262-470b-a99d-09183c352541"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cff86138-5219-4d78-9388-f106689d133b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3805e977-2a45-4ddf-8745-01571550e056"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""97e476b7-20a7-427e-9b5b-df008b43fd41"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5a811c27-336d-45c3-93a5-d341b3ce57b7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a737f3f9-09fb-4c49-a199-2e283598ce03"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""90d8ea7b-634f-4376-9682-9945f04f7707"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""236199fe-e139-45c9-aa9c-7314f08bcf53"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""341aceb9-4054-4b16-b880-af36094ff59b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""961134aa-10bd-42cb-b719-a7f0ff9a8787"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21c19815-027d-4259-8323-a14faa1081d0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a81be1a-1588-4ee1-a4df-fa3c88a07bb2"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d6df658-9ad3-4cf5-b8ad-a5122cb68e4f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""047e3588-3edb-4f18-8955-be0397c070d6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7463f0d2-69fc-4d1c-9a63-92d9cd0cb963"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""e3d55de2-9bf7-4ebb-8050-926bf16bc47b"",
            ""actions"": [
                {
                    ""name"": ""Retry"",
                    ""type"": ""Button"",
                    ""id"": ""8900abf0-48a4-4e97-a35b-dfbea717e3b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""7cffe0a3-e3a5-4e9a-a870-2dae5cfa21b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a2b303dc-508d-4f86-ad4e-354f79545412"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Retry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ec15501-9c28-4674-a0d7-cf0058b366ea"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Rotate = m_Player.FindAction("Rotate", throwIfNotFound: true);
            m_Player_Thrust = m_Player.FindAction("Thrust", throwIfNotFound: true);
            m_Player_Stop = m_Player.FindAction("Stop", throwIfNotFound: true);
            m_Player_Shot = m_Player.FindAction("Shot", throwIfNotFound: true);
            m_Player_RotateMouse = m_Player.FindAction("RotateMouse", throwIfNotFound: true);
            // Menu
            m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
            m_Menu_Retry = m_Menu.FindAction("Retry", throwIfNotFound: true);
            m_Menu_Quit = m_Menu.FindAction("Quit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Rotate;
        private readonly InputAction m_Player_Thrust;
        private readonly InputAction m_Player_Stop;
        private readonly InputAction m_Player_Shot;
        private readonly InputAction m_Player_RotateMouse;
        public struct PlayerActions
        {
            private @Controls m_Wrapper;
            public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Rotate => m_Wrapper.m_Player_Rotate;
            public InputAction @Thrust => m_Wrapper.m_Player_Thrust;
            public InputAction @Stop => m_Wrapper.m_Player_Stop;
            public InputAction @Shot => m_Wrapper.m_Player_Shot;
            public InputAction @RotateMouse => m_Wrapper.m_Player_RotateMouse;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Rotate.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                    @Rotate.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                    @Rotate.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotate;
                    @Thrust.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnThrust;
                    @Thrust.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnThrust;
                    @Thrust.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnThrust;
                    @Stop.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStop;
                    @Stop.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStop;
                    @Stop.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStop;
                    @Shot.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShot;
                    @Shot.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShot;
                    @Shot.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnShot;
                    @RotateMouse.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateMouse;
                    @RotateMouse.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateMouse;
                    @RotateMouse.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRotateMouse;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Rotate.started += instance.OnRotate;
                    @Rotate.performed += instance.OnRotate;
                    @Rotate.canceled += instance.OnRotate;
                    @Thrust.started += instance.OnThrust;
                    @Thrust.performed += instance.OnThrust;
                    @Thrust.canceled += instance.OnThrust;
                    @Stop.started += instance.OnStop;
                    @Stop.performed += instance.OnStop;
                    @Stop.canceled += instance.OnStop;
                    @Shot.started += instance.OnShot;
                    @Shot.performed += instance.OnShot;
                    @Shot.canceled += instance.OnShot;
                    @RotateMouse.started += instance.OnRotateMouse;
                    @RotateMouse.performed += instance.OnRotateMouse;
                    @RotateMouse.canceled += instance.OnRotateMouse;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Menu
        private readonly InputActionMap m_Menu;
        private IMenuActions m_MenuActionsCallbackInterface;
        private readonly InputAction m_Menu_Retry;
        private readonly InputAction m_Menu_Quit;
        public struct MenuActions
        {
            private @Controls m_Wrapper;
            public MenuActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Retry => m_Wrapper.m_Menu_Retry;
            public InputAction @Quit => m_Wrapper.m_Menu_Quit;
            public InputActionMap Get() { return m_Wrapper.m_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
            public void SetCallbacks(IMenuActions instance)
            {
                if (m_Wrapper.m_MenuActionsCallbackInterface != null)
                {
                    @Retry.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnRetry;
                    @Retry.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnRetry;
                    @Retry.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnRetry;
                    @Quit.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnQuit;
                    @Quit.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnQuit;
                    @Quit.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnQuit;
                }
                m_Wrapper.m_MenuActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Retry.started += instance.OnRetry;
                    @Retry.performed += instance.OnRetry;
                    @Retry.canceled += instance.OnRetry;
                    @Quit.started += instance.OnQuit;
                    @Quit.performed += instance.OnQuit;
                    @Quit.canceled += instance.OnQuit;
                }
            }
        }
        public MenuActions @Menu => new MenuActions(this);
        public interface IPlayerActions
        {
            void OnRotate(InputAction.CallbackContext context);
            void OnThrust(InputAction.CallbackContext context);
            void OnStop(InputAction.CallbackContext context);
            void OnShot(InputAction.CallbackContext context);
            void OnRotateMouse(InputAction.CallbackContext context);
        }
        public interface IMenuActions
        {
            void OnRetry(InputAction.CallbackContext context);
            void OnQuit(InputAction.CallbackContext context);
        }
    }
}
